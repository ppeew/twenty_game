// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	// 商城模块
	// 1.查询商品（分页）
	SelectGoods(ctx context.Context, in *SelectGoodsReq, opts ...grpc.CallOption) (*SelectGoodsRsp, error)
	// 2.购买商品
	BuyGoods(ctx context.Context, in *BuyGoodReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 交易模块
	// 1.查询交易商品（分页）
	SelectTradeItems(ctx context.Context, in *SelectTradeItemsReq, opts ...grpc.CallOption) (*SelectTradeItemsRsp, error)
	// 2.上架交易商品
	PushTradeItem(ctx context.Context, in *PushTradeItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 3.下架交易商品
	DownTradeItem(ctx context.Context, in *DownTradeItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 4.购买交易商品
	BuyTradeItem(ctx context.Context, in *BuyTradeItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) SelectGoods(ctx context.Context, in *SelectGoodsReq, opts ...grpc.CallOption) (*SelectGoodsRsp, error) {
	out := new(SelectGoodsRsp)
	err := c.cc.Invoke(ctx, "/store.Store/SelectGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) BuyGoods(ctx context.Context, in *BuyGoodReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/store.Store/BuyGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) SelectTradeItems(ctx context.Context, in *SelectTradeItemsReq, opts ...grpc.CallOption) (*SelectTradeItemsRsp, error) {
	out := new(SelectTradeItemsRsp)
	err := c.cc.Invoke(ctx, "/store.Store/SelectTradeItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) PushTradeItem(ctx context.Context, in *PushTradeItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/store.Store/PushTradeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) DownTradeItem(ctx context.Context, in *DownTradeItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/store.Store/DownTradeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) BuyTradeItem(ctx context.Context, in *BuyTradeItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/store.Store/BuyTradeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	// 商城模块
	// 1.查询商品（分页）
	SelectGoods(context.Context, *SelectGoodsReq) (*SelectGoodsRsp, error)
	// 2.购买商品
	BuyGoods(context.Context, *BuyGoodReq) (*emptypb.Empty, error)
	// 交易模块
	// 1.查询交易商品（分页）
	SelectTradeItems(context.Context, *SelectTradeItemsReq) (*SelectTradeItemsRsp, error)
	// 2.上架交易商品
	PushTradeItem(context.Context, *PushTradeItemReq) (*emptypb.Empty, error)
	// 3.下架交易商品
	DownTradeItem(context.Context, *DownTradeItemReq) (*emptypb.Empty, error)
	// 4.购买交易商品
	BuyTradeItem(context.Context, *BuyTradeItemReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) SelectGoods(context.Context, *SelectGoodsReq) (*SelectGoodsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectGoods not implemented")
}
func (UnimplementedStoreServer) BuyGoods(context.Context, *BuyGoodReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyGoods not implemented")
}
func (UnimplementedStoreServer) SelectTradeItems(context.Context, *SelectTradeItemsReq) (*SelectTradeItemsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTradeItems not implemented")
}
func (UnimplementedStoreServer) PushTradeItem(context.Context, *PushTradeItemReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTradeItem not implemented")
}
func (UnimplementedStoreServer) DownTradeItem(context.Context, *DownTradeItemReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownTradeItem not implemented")
}
func (UnimplementedStoreServer) BuyTradeItem(context.Context, *BuyTradeItemReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyTradeItem not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_SelectGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).SelectGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/SelectGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).SelectGoods(ctx, req.(*SelectGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_BuyGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyGoodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).BuyGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/BuyGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).BuyGoods(ctx, req.(*BuyGoodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_SelectTradeItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTradeItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).SelectTradeItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/SelectTradeItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).SelectTradeItems(ctx, req.(*SelectTradeItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_PushTradeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushTradeItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).PushTradeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/PushTradeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).PushTradeItem(ctx, req.(*PushTradeItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_DownTradeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownTradeItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DownTradeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/DownTradeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DownTradeItem(ctx, req.(*DownTradeItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_BuyTradeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyTradeItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).BuyTradeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/BuyTradeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).BuyTradeItem(ctx, req.(*BuyTradeItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectGoods",
			Handler:    _Store_SelectGoods_Handler,
		},
		{
			MethodName: "BuyGoods",
			Handler:    _Store_BuyGoods_Handler,
		},
		{
			MethodName: "SelectTradeItems",
			Handler:    _Store_SelectTradeItems_Handler,
		},
		{
			MethodName: "PushTradeItem",
			Handler:    _Store_PushTradeItem_Handler,
		},
		{
			MethodName: "DownTradeItem",
			Handler:    _Store_DownTradeItem_Handler,
		},
		{
			MethodName: "BuyTradeItem",
			Handler:    _Store_BuyTradeItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store.proto",
}
